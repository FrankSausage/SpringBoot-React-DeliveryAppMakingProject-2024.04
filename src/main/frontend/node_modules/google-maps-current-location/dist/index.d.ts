/// <reference types="googlemaps" />
import LocationButton from './LocationButton';
import LocationMarker from './LocationMarker';
import { ButtonStyle, MarkerStyle } from './types';
declare type WatchPositionFnType = (successCallback: PositionCallback, errorCallback?: PositionErrorCallback | null, options?: PositionOptions) => number | Promise<number | string>;
export declare type Options = {
    buttonStyle?: ButtonStyle;
    markerStyle?: MarkerStyle;
    showAccuracyRadius?: boolean;
    watchPositionFn?: WatchPositionFnType;
};
/**
* Adds a button to the toolbar for user to click and see their current position
* on the map with a marker.
*/
declare class CurrentLocation {
    controlUI: LocationButton;
    locationMarker: LocationMarker;
    map: google.maps.Map;
    positionCount: number;
    positionOptions: PositionOptions;
    watchId?: number | string;
    watchPositionFn: WatchPositionFnType;
    constructor(map: google.maps.Map, options?: Options);
    /**
     * Starts watching for the user position.
     * This will be called automatically each time the position changes.
     * */
    startWatchPosition(): void;
    /**
     * Everytime the position changes, the location of the marker also changes
     * as well as some ControlUI settings
     * */
    updatePosition(pos: GeolocationPosition): void;
    /**
     * When an error occurs during the watchPosition (e.g. PERMISSION_DENIED) an alert is showed,
     * the watchId is set to undefined (to allow a re-watching) and the ControlUI settings are set to default
     * */
    setError(err: GeolocationPositionError): void;
}
export default function (map: google.maps.Map, options?: Options): CurrentLocation;
export {};
