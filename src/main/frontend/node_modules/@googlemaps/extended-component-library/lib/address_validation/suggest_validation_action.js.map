{"version":3,"file":"suggest_validation_action.js","sourceRoot":"","sources":["../../src/address_validation/suggest_validation_action.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {Address, AddressValidationResponse, Granularity, ValidationResult} from '../utils/googlemaps_types.js';\n\n\n/** Suggested action to take for this validation result. */\nexport enum SuggestedAction {\n  ACCEPT = 'ACCEPT',\n  CONFIRM = 'CONFIRM',\n  FIX = 'FIX',\n  ADD_SUBPREMISES = 'ADD_SUBPREMISES'\n}\n\ninterface ValidationSuggestion {\n  suggestedAction: SuggestedAction;\n}\n\n// Some referenced area types.\nconst ADMINISTRATIVE_AREA_LEVEL_1 = 'administrative_area_level_1';\nconst ADMINISTRATIVE_AREA_LEVEL_2 = 'administrative_area_level_2';\nconst ADMINISTRATIVE_AREA_LEVEL_3 = 'administrative_area_level_3';\nconst POSTAL_CODE = 'postal_code';\nconst POSTAL_CODE_SUFFIX = 'postal_code_suffix';\nconst COUNTRY = 'country';\nconst SUBPREMISE = 'subpremise';\n\nfunction isUSA(address: Address): boolean {\n  return address.postalAddress?.regionCode === 'US';\n}\n\nfunction isMissingNonSubpremiseComponent(result: ValidationResult): boolean {\n  const missingComponents = result.address.missingComponentTypes || [];\n  return (missingComponents.length > 1) ||\n      ((missingComponents.length === 1) &&\n       (missingComponents[0] !== SUBPREMISE));\n}\n\n/**\n * Returns true if the validation granularity is `OTHER`, i.e. worse than\n * `ROUTE` level. `PREMISE`, `SUBPREMISE`, and `PREMISE_PROXIMITY` are all\n * considered as good as `ROUTE` or better.\n */\nfunction hasValidationGranularityOther(result: ValidationResult): boolean {\n  return !result.verdict?.validationGranularity ||\n      result.verdict.validationGranularity === Granularity.OTHER;\n}\n\nfunction hasSuspiciousComponent(result: ValidationResult): boolean {\n  return result.address.addressComponents.some(\n      c => c.confirmationLevel === 'UNCONFIRMED_AND_SUSPICIOUS');\n}\n\nfunction hasUnresolvedToken(result: ValidationResult): boolean {\n  return (result.address.unresolvedTokens || []).length > 0;\n}\n\n/**\n * Returns true if the result has an inference for a component other than the\n * postal code, administrative area (1, 2, or 3), or country.\n */\nfunction hasMajorInference(result: ValidationResult): boolean {\n  const minorComponents = new Set([\n    POSTAL_CODE, POSTAL_CODE_SUFFIX, ADMINISTRATIVE_AREA_LEVEL_1,\n    ADMINISTRATIVE_AREA_LEVEL_2, ADMINISTRATIVE_AREA_LEVEL_3, COUNTRY\n  ]);\n  return result.address.addressComponents.some(\n      c => c.isInferred && !minorComponents.has(c.componentType));\n}\n\nfunction hasReplacement(result: ValidationResult): boolean {\n  return !!result.verdict?.hasReplacedComponents;\n}\n\n/**\n * Returns true if this is a US address that is missing a subpremise component\n * (and nothing else).\n */\nfunction isMissingExactlyUSASubpremise(result: ValidationResult): boolean {\n  return isUSA(result.address) &&\n      (result.address.missingComponentTypes?.length === 1) &&\n      (result.address.missingComponentTypes[0] === SUBPREMISE);\n}\n\n/**\n * This is a JavaScript function that analyzes an Address Validation API\n * response and outputs a single recommended follow-up action you should take\n * based on the quality of the address.\n *\n * This function returns an object with a property `suggestedAction`, which can\n * be one of the following values:\n *\n * * `'FIX'`: the address returned by the API is low quality. You should prompt\n * your user for more information.\n *\n * * `'CONFIRM'`: the address returned by the API is high quality, but the API\n * had to make significant changes to the input address. You might prompt your\n * user for confirmation.\n *\n * * `'ACCEPT'`: the address returned by the API is high quality. There may be\n * small corrections made by the Address Validation API. You can accept the\n * address.\n *\n * * `'ADD_SUBPREMISES'`: The end user entered an address that should have a\n * subpremises (e.g. apartment number) but did not include one. Your app should\n * ask the end user for this extra information and try again.\n *\n * You should call this function after making a call to the Address Validation\n * API, providing the API response as its argument. Your system should either\n * accept the address or prompt the user, based on the response from this\n * function.\n *\n * The logic for converting the API response into a single recommended action is\n * based on the principles discussed in the [Build your validation\n * logic](https://developers.google.com/maps/documentation/address-validation/build-validation-logic).\n * There are many ways to analyze the API response; this function serves as\n * a suggested implementation.\n *\n * **Best Practices**\n *\n * * See [Workflow\n * overview](https://developers.google.com/maps/documentation/address-validation/build-validation-logic#workflow-overview)\n * for the recommended behavior your system should have for each recommended\n * action.\n *\n * * Allow your system to accept the entered address even if the user does\n * not respond to prompts to fix the address.\n *\n * * If you want to make your own modifications to the logic, we recommend\n * reading through [Build your validation\n * logic](https://developers.google.com/maps/documentation/address-validation/build-validation-logic)\n * for guidance.\n *\n * @param response - A response object from the Address Validation API in the\n *     Maps JS SDK.\n */\nexport function suggestValidationAction(response: AddressValidationResponse):\n    ValidationSuggestion {\n  const result = response.result;\n  if (isMissingNonSubpremiseComponent(result) ||\n      hasValidationGranularityOther(result) || hasSuspiciousComponent(result) ||\n      hasUnresolvedToken(result)) {\n    return {suggestedAction: SuggestedAction.FIX};\n  } else if (hasMajorInference(result) || hasReplacement(result)) {\n    return {suggestedAction: SuggestedAction.CONFIRM};\n  } else if (isMissingExactlyUSASubpremise(result)) {\n    return {suggestedAction: SuggestedAction.ADD_SUBPREMISES};\n  } else {\n    return {suggestedAction: SuggestedAction.ACCEPT};\n  }\n}"]}