{"version":3,"file":"deferred.js","sourceRoot":"","sources":["../../src/utils/deferred.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH;;;GAGG;AACH,MAAM,OAAO,QAAQ;IAArB;QAOW,YAAO,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACpD,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;YAC/B,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;QAC/B,CAAC,CAAC,CAAC;IAYL,CAAC;IAVC,oDAAoD;IACpD,OAAO,CAAC,KAAQ;QACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,mDAAmD;IACnD,MAAM,CAAC,KAAa;QAClB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Utility wrapper of a Promise object with methods to resolve or reject the\n * promise after it is initialized.\n */\nexport class Deferred<T = void> {\n  /** Value that the promise resolves to; undefined otherwise. */\n  value?: T;\n\n  private resolveCallback!: (value: T) => void;\n  private rejectCallback!: (error?: Error) => void;\n\n  readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolveCallback = resolve;\n    this.rejectCallback = reject;\n  });\n\n  /** Resolves the promise with the provided value. */\n  resolve(value: T) {\n    this.value = value;\n    this.resolveCallback(value);\n  }\n\n  /** Rejects the promise with the provided error. */\n  reject(error?: Error) {\n    this.rejectCallback(error);\n  }\n}\n"]}