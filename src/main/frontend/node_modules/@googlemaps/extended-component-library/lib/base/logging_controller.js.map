{"version":3,"file":"logging_controller.js","sourceRoot":"","sources":["../../src/base/logging_controller.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH;;;;GAIG;AACH,MAAM,OAAO,iBAAiB;IAC5B,YAA6B,IAAuC;QAAvC,SAAI,GAAJ,IAAI,CAAmC;QAClE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,UAAU,KAAI,CAAC;IAEf,2DAA2D;IAC3D,IAAI,CAAC,OAAe,EAAE,GAAG,IAAe;QACtC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,oDAAoD;IACpD,IAAI,CAAC,OAAe,EAAE,GAAG,IAAe;QACtC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,mDAAmD;IACnD,KAAK,CAAC,OAAe,EAAE,GAAG,IAAe;QACvC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACtD,CAAC;IAED,kEAAkE;IAClE,aAAa,CAAC,OAAe;QAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAEO,cAAc,CAAC,OAAe;QACpC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,OAAO,EAAE,CAAC;IAC5D,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\n\n/**\n * Controller that handles logging messages to the web console. Components\n * should use this controller rather than calling `console` directly to prepend\n * useful information to the messages.\n */\nexport class LoggingController implements ReactiveController {\n  constructor(private readonly host: ReactiveControllerHost&LitElement) {\n    this.host.addController(this);\n  }\n\n  hostUpdate() {}\n\n  /** Outputs an informational message to the web console. */\n  info(message: string, ...data: unknown[]) {\n    console.info(this.formatMessage(message), ...data);\n  }\n\n  /** Outputs a warning message to the web console. */\n  warn(message: string, ...data: unknown[]) {\n    console.warn(this.formatMessage(message), ...data);\n  }\n\n  /** Outputs an error message to the web console. */\n  error(message: string, ...data: unknown[]) {\n    console.error(this.formatMessage(message), ...data);\n  }\n\n  /** Returns a formatted message for display in the web console. */\n  formatMessage(message: string) {\n    return this.prependTagName(message);\n  }\n\n  private prependTagName(message: string): string {\n    return `<${this.host.tagName.toLowerCase()}>: ${message}`;\n  }\n}\n"]}