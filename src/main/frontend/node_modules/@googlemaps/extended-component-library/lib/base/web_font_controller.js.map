{"version":3,"file":"web_font_controller.js","sourceRoot":"","sources":["../../src/base/web_font_controller.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,OAAO,EAAC,2BAA2B,EAAC,MAAM,uBAAuB,CAAC;AAElE,oCAAoC;AACpC,MAAM,CAAN,IAAY,OAGX;AAHD,WAAY,OAAO;IACjB,gDAAqC,CAAA;IACrC,kEAAuD,CAAA;AACzD,CAAC,EAHW,OAAO,KAAP,OAAO,QAGlB;AAQD,MAAM,gBAAgB,GAAmC,MAAM,CAAC,MAAM,CAAC;IACrE,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;QAC1B,kBAAkB,EAAE,IAAI;QACxB,gBAAgB,EAAE,KAAK;QACvB,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;KACpB;IACD,CAAC,OAAO,CAAC,yBAAyB,CAAC,EAAE;QACnC,2EAA2E;QAC3E,kDAAkD;QAClD,2EAA2E;QAC3E,4EAA4E;QAC5E,kBAAkB,EAAE,IAAI;QACxB,gBAAgB,EAAE,IAAI;QACtB,OAAO,EAAE,CAAC,GAAG,CAAC;KACf;CACF,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAC5B,YACqB,IAAuC,EACvC,KAAgB;QADhB,SAAI,GAAJ,IAAI,CAAmC;QACvC,UAAK,GAAL,KAAK,CAAW;QACnC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAEzB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,kBAAkB,EAAE;gBAC7C,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC9C;SACF;IACH,CAAC;IAED,aAAa;QACX,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YAC7B,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE;gBAC3C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACrD;SACF;IACH,CAAC;IAEO,kBAAkB,CACtB,QAAsC,EAAE,IAAa;QACvD,MAAM,QAAQ,GACV,QAAQ,CAAC,aAAa,CAAC,eAAe,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxE,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,CAAC,WAAW,CAChB,2BAA2B,CAAC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;SACxE;IACH,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\n\nimport {createLinkElementForWebFont} from '../utils/dom_utils.js';\n\n/** Web fonts that can be loaded. */\nexport enum WebFont {\n  GOOGLE_SANS_TEXT = 'Google Sans Text',\n  MATERIAL_SYMBOLS_OUTLINED = 'Material Symbols Outlined',\n}\n\ninterface WebFontConfig {\n  loadInDocumentHead: boolean;\n  loadInShadowRoot: boolean;\n  weights: number[];\n}\n\nconst WEB_FONT_CONFIGS: {[key: string]: WebFontConfig} = Object.freeze({\n  [WebFont.GOOGLE_SANS_TEXT]: {\n    loadInDocumentHead: true,\n    loadInShadowRoot: false,\n    weights: [400, 500],\n  },\n  [WebFont.MATERIAL_SYMBOLS_OUTLINED]: {\n    // Material Symbols ligatures must be added under a component's shadow root\n    // in order for its CSS style rule to take effect;\n    // The font must also be loaded in the main document due to a long-standing\n    // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=336876.\n    loadInDocumentHead: true,\n    loadInShadowRoot: true,\n    weights: [400],\n  },\n});\n\n/**\n * Controller that handles loading one or more font resources in the document.\n */\nexport class WebFontController implements ReactiveController {\n  constructor(\n      private readonly host: ReactiveControllerHost&LitElement,\n      private readonly fonts: WebFont[]) {\n    host.addController(this);\n\n    for (const font of fonts) {\n      if (WEB_FONT_CONFIGS[font].loadInDocumentHead) {\n        this.injectWebFontAsset(document.head, font);\n      }\n    }\n  }\n\n  hostConnected() {\n    for (const font of this.fonts) {\n      if (WEB_FONT_CONFIGS[font].loadInShadowRoot) {\n        this.injectWebFontAsset(this.host.renderRoot, font);\n      }\n    }\n  }\n\n  private injectWebFontAsset(\n      rootNode: HTMLElement|DocumentFragment, font: WebFont) {\n    const existing =\n        rootNode.querySelector(`link[href*=\"${encodeURIComponent(font)}\"]`);\n    if (!existing) {\n      rootNode.appendChild(\n          createLinkElementForWebFont(font, WEB_FONT_CONFIGS[font].weights));\n    }\n  }\n}\n"]}