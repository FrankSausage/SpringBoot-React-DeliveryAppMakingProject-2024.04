{"version":3,"file":"place_data_provider.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_data_provider/place_data_provider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ContextProvider, provide} from '@lit/context';\nimport {html, PropertyValues} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\nimport {choose} from 'lit/directives/choose.js';\n\nimport {BaseComponent} from '../../base/base_component.js';\nimport {RequestErrorEvent} from '../../base/events.js';\nimport {SlotValidationController} from '../../base/slot_validation_controller.js';\nimport {STRING_ARRAY_ATTRIBUTE_CONVERTER} from '../../utils/attribute_converters.js';\nimport type {Place, PlaceResult} from '../../utils/googlemaps_types.js';\nimport {isNotAvailableError, isPlaceResult, makePlaceFromPlaceResult} from '../../utils/place_utils.js';\nimport {PlaceAttribution} from '../place_attribution/place_attribution.js';\nimport {type PlaceConsumerRegistration, placeConsumerRegistrationContext, placeContext, PlaceDataConsumer} from '../place_data_consumer.js';\n\nimport {CachedPlaceLookup} from './cached_place_lookup.js';\n\n\nenum LoadingState {\n  EMPTY = 'EMPTY',\n  LOADING = 'LOADING',\n  LOADED = 'LOADED',\n  ERROR = 'ERROR',\n}\n\nconst CACHE_SIZE = 100;\n\n/**\n * Provides place data to child components as context.\n *\n * This component can fetch place data from the Places API, or forward a Place\n * or PlaceResult object provided elsewhere in code. By default, this component\n * will only request fields from the Places API which are required to render\n * child components. The component will locally cache place data to avoid\n * redundant API requests.\n *\n * @slot - Elements to receive Places data.\n * @slot initial-loading - If specified, display this content when the component\n * is initially loading Places data. Content in this slot will receive Places\n * data, but some or all fields may be undefined.\n * @slot error - If specified, display this content when there was any error\n * loading data from the Places API.\n *\n * @event {RequestErrorEvent} gmpx-requesterror - Indicates an error condition\n * in an underlying Google Maps JavaScript API call. (React: onRequestError)\n */\n@customElement('gmpx-place-data-provider')\nexport class PlaceDataProvider extends BaseComponent {\n  /**\n   * If `place` is provided with a `Place` or `PlaceResult` instance, but does\n   * not contain fields required by child components, this element will make a\n   * request to the Place API to retrieve the missing data. Set\n   * `auto-fetch-disabled` to prevent the component from performing these\n   * requests.\n   */\n  @property({type: Boolean, attribute: 'auto-fetch-disabled', reflect: true})\n  autoFetchDisabled = false;\n\n  /**\n   * Manually specify the fields to request from the Places API.\n   *\n   * If unspecified, the component will request only fields used by child\n   * components.\n   */\n  @property({converter: STRING_ARRAY_ATTRIBUTE_CONVERTER, reflect: true})\n  fields?: string[];\n\n  /**\n   * The place to be displayed by this component. Provide a [Place\n   * ID](https://developers.google.com/maps/documentation/places/web-service/place-id)\n   * as a string to have the component look up and display details from the\n   * Place API. The component will not make further API requests if child\n   * components are added at a later time. If required, explicitly request a\n   * data fetch by re-setting `place` to the same Place ID as before.\n   *\n   * Alternatively, assign a `Place` or `PlaceResult` object to the `place`\n   * property to render it directly (note that the attribute, on the other hand,\n   * only accepts a Place ID string).\n   */\n  @property({type: String, hasChanged: () => true})\n  place?: string|Place|PlaceResult;\n\n  /**\n   * @ignore\n   * Place consumer registration functions, passed to child `PlaceDataConsumer`s\n   * via context.\n   */\n  @provide({context: placeConsumerRegistrationContext})\n  @property({attribute: false})\n  contextRegistration: PlaceConsumerRegistration = {\n    registerPlaceConsumer: (c) => void this.registerPlaceConsumer(c),\n    unregisterPlaceConsumer: (c) => void this.unregisterPlaceConsumer(c),\n  };\n\n  @state() private loadingState = LoadingState.EMPTY;\n\n  protected readonly slotValidator = new SlotValidationController(\n      this, this.logger, ['', 'initial-loading', 'error']);\n\n  private readonly placeConsumers = new Set<PlaceDataConsumer>();\n  private readonly placeAttributions = new Set<PlaceAttribution>();\n\n  private readonly placeContextProvider =\n      new ContextProvider(this, {context: placeContext});\n\n  /**\n   * Place data passed to child `PlaceDataConsumer`s via context.\n   */\n  private get contextPlace(): Place|undefined {\n    return this.placeContextProvider.value;\n  }\n\n  private set contextPlace(place: Place|undefined) {\n    // Force an update to the consumer even if the place is the same object.\n    // This allows developers to refresh the consumers by setting\n    // provider.place = provider.place, for example if they added/fetched new\n    // fields to the place object themselves.\n    this.placeContextProvider.setValue(place, /* force= */ true);\n  }\n\n  private static readonly placeLookup = new CachedPlaceLookup(CACHE_SIZE);\n\n  protected override render() {\n    return choose(this.loadingState, [\n      [LoadingState.EMPTY, () => html``],\n      [LoadingState.LOADING, () => html`<slot name=\"initial-loading\"></slot>`],\n      [LoadingState.LOADED, () => html`<slot></slot>`],\n      [LoadingState.ERROR, () => html`<slot name=\"error\"></slot>`]\n    ]);\n  }\n\n  protected override async updated(changedProperties: PropertyValues<this>) {\n    if (changedProperties.has('place')) {\n      try {\n        await this.updatePlace();\n      } catch (error: unknown) {\n        this.handleError(error);\n      }\n    }\n  }\n\n  private async updatePlace() {\n    this.loadingState = LoadingState.LOADING;\n    // Set this.contextPlace to an appropriate Place v2, according to the\n    // type of this.place\n    if (!this.place) {  // undefined or empty string\n      this.contextPlace = undefined;\n      this.loadingState = LoadingState.EMPTY;\n      return;\n    } else if (typeof this.place === 'string') {\n      this.contextPlace =\n          await PlaceDataProvider.placeLookup.getPlace(this.place);\n    } else if (isPlaceResult(this.place)) {\n      this.contextPlace = await makePlaceFromPlaceResult(this.place, this);\n      PlaceDataProvider.placeLookup.updatePlace(this.contextPlace);\n    } else {  // this.place is a Place\n      this.contextPlace = this.place;\n      PlaceDataProvider.placeLookup.updatePlace(this.contextPlace);\n    }\n\n    // Fetch place data (a) if this.place is a Place ID, or (b) if this.place\n    // is an object and auto-fetch is enabled\n    if ((typeof this.place === 'string') || !this.autoFetchDisabled) {\n      let fields: string[];\n      if (this.fields?.length) {\n        fields = this.fields;\n      } else {\n        // Defer execution to ensure that place consumers finish registration\n        await 0;\n        fields = this.getConsumerFields();\n      }\n      try {\n        await this.contextPlace.fetchFields({fields});\n      } catch (error: unknown) {\n        if (isNotAvailableError(error, 'fetchFields()')) {\n          // If the SDK doesn't support fetchFields(), replace the Place with a\n          // shimmed version, taking advantage of the fallback capabilities of\n          // `makePlaceFromPlaceResult()`.\n          this.contextPlace =\n              await makePlaceFromPlaceResult({place_id: this.contextPlace.id});\n          PlaceDataProvider.placeLookup.updatePlace(this.contextPlace);\n          await this.contextPlace.fetchFields({fields});\n        } else {\n          throw error;\n        }\n      }\n      // Manually update consumers of the context Place, since the object has\n      // been mutated\n      for (const consumer of this.placeConsumers) {\n        consumer.requestUpdate(\n            'contextPlace', consumer.contextPlace, {hasChanged: () => true});\n      }\n    }\n    this.appendAttributionIfAbsent();\n    this.loadingState = LoadingState.LOADED;\n  }\n\n  private registerPlaceConsumer(consumer: PlaceDataConsumer) {\n    this.placeConsumers.add(consumer);\n    if (consumer instanceof PlaceAttribution) {\n      this.placeAttributions.add(consumer);\n    }\n  }\n\n  private unregisterPlaceConsumer(consumer: PlaceDataConsumer) {\n    this.placeConsumers.delete(consumer);\n    if (consumer instanceof PlaceAttribution) {\n      this.placeAttributions.delete(consumer);\n    }\n  }\n\n  private getConsumerFields(): Array<keyof Place> {\n    const fieldSet = new Set<keyof Place>();\n    for (const consumer of this.placeConsumers) {\n      for (const field of consumer.getRequiredFields()) {\n        fieldSet.add(field);\n      }\n    }\n    return Array.from(fieldSet.values());\n  }\n\n  /**\n   * Appends a Place Attribution component as child if none exists in order to\n   * comply with the Google Maps Platform Terms of Service.\n   */\n  private appendAttributionIfAbsent() {\n    if (this.placeAttributions.size === 0) {\n      this.appendChild(new PlaceAttribution());\n    }\n  }\n\n  private handleError(error: unknown) {\n    this.loadingState = LoadingState.ERROR;\n    const requestErrorEvent = new RequestErrorEvent(error);\n    this.dispatchEvent(requestErrorEvent);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-place-data-provider': PlaceDataProvider;\n  }\n}\n"]}