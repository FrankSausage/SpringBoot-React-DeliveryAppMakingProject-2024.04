{"version":3,"file":"place_data_consumer.js","sourceRoot":"","sources":["../../src/place_building_blocks/place_data_consumer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {consume, createContext} from '@lit/context';\nimport {PropertyValues} from 'lit';\nimport {property, state} from 'lit/decorators.js';\n\nimport {BaseComponent} from '../base/base_component.js';\nimport {attachContextRoot} from '../utils/context_utils.js';\nimport type {Place, PlaceResult} from '../utils/googlemaps_types.js';\nimport {isPlaceResult, makePlaceFromPlaceResult} from '../utils/place_utils.js';\n\n// If this module is loaded before the definitions of other elements\n// (specifically, Place data providers), adding a context root ensures\n// registration of data consumers by late-upgraded data providers.\nattachContextRoot();\n\n/**\n * Registration functions passed from a `PlaceDataProvider` via context. The\n * `PlaceDataConsumer` calls these to register/unregister itself with the data\n * provider, allowing the provider to get its required fields and trigger\n * updates when place data is loaded.\n */\nexport interface PlaceConsumerRegistration {\n  registerPlaceConsumer: (consumer: PlaceDataConsumer) => void;\n  unregisterPlaceConsumer: (consumer: PlaceDataConsumer) => void;\n}\n\nexport const placeContext = createContext<Place|undefined>(Symbol('place'));\n\nexport const placeConsumerRegistrationContext =\n    createContext<PlaceConsumerRegistration>(\n        Symbol('place-consumer-registration'));\n\n/**\n * Base class for components which render Place data provided elsewhere; i.e.\n * Place Representation Building Blocks.\n *\n * This class implements functionality to retrieve a `Place` or `PlaceResult`\n * via context from a parent `<gmpx-place-data-provider>` component.\n */\nexport abstract class PlaceDataConsumer extends BaseComponent {\n  /**\n   * @ignore\n   * Place consumer registration functions, passed from a parent\n   * `PlaceDataProvider` via context.\n   */\n  @consume({context: placeConsumerRegistrationContext, subscribe: true})\n  @property({attribute: false})\n  contextRegistration?: PlaceConsumerRegistration;\n\n  /**\n   * @ignore\n   * Place data passed from a parent `PlaceDataProvider` via context.\n   */\n  @consume({context: placeContext, subscribe: true})\n  @property({attribute: false})\n  contextPlace: Place|undefined;\n\n  /**\n   * Place data to render, overriding anything provided by context.\n   */\n  get place():\n      // Accept data in the form of either the new `Place` class from Places API\n      // or the legacy `PlaceResult` class and convert to the former internally.\n      Place|PlaceResult|null|undefined {\n    return this.placeInternal;\n  }\n  set place(value: Place|PlaceResult|null|undefined) {\n    this.placeInternal = value;\n    this.updatePlaceV2(value);\n  }\n\n  /**\n   * This read-only property and attribute indicate whether the component\n   * has the required Place data to display itself.\n   *\n   * Use the attribute to target CSS rules if you wish to hide this component,\n   * or display alternate content, when there's no valid data.\n   */\n  @property({type: Boolean, attribute: 'no-data', reflect: true}) noData = true;\n\n  @state() private placeV2?: Place|null;\n\n  private placeInternal?: Place|PlaceResult|null;\n\n  protected override willUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has('contextPlace') && !this.placeV2) {\n      // Trigger callback if Place from context changes and is not overridden.\n      this.placeChangedCallback(\n          this.contextPlace, changedProperties.get('contextPlace'));\n    }\n    // Always refresh the value of `noData` on update; this also reverts any\n    // change to the property from outside the component since it's read-only.\n    const place = this.getPlace();\n    this.noData = !(place && this.placeHasData(place));\n    if (changedProperties.has('contextRegistration')) {\n      this.contextRegistration?.registerPlaceConsumer(this);\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.contextRegistration?.unregisterPlaceConsumer(this);\n  }\n\n  /**\n   * Callback to be invoked when the object returned by calling `getPlace()`\n   * changes, including when fields in the object are newly populated.\n   *\n   * @param value New value of the object returned by `getPlace()`.\n   * @param oldValue Old value of the object returned by `getPlace()`.\n   */\n  protected placeChangedCallback(value?: Place|null, oldValue?: Place|null) {}\n\n  /**\n   * @ignore\n   * Components should override this method if they wish to show a `no-data`\n   * attribute for use with CSS styling.\n   */\n  protected placeHasData(place: Place): boolean {\n    return true;\n  }\n\n  /**\n   * @ignore\n   * Returns any Place fields required for this component to render content.\n   *\n   * A parent `<gmpx-place-data-provider>` component will call this method\n   * before making an API call to determine which Place fields to request.\n   */\n  abstract getRequiredFields(): Array<keyof Place>;\n\n  /**\n   * Returns the Place data object to be used when rendering.\n   *\n   * If a `Place` or `PlaceResult` object is specified directly on the component\n   * as a property, it will take priority. Otherwise, this method attempts to\n   * return one provided by a parent `<gmpx-place-data-provider>` element.\n   *\n   * The convention for data providers is to use `undefined` to indicate Place\n   * data has not been requested, or is in the process of being requested. The\n   * value `null` indicates that Place data could not be found.\n   */\n  protected getPlace(): Place|null|undefined {\n    return this.placeV2 ?? this.contextPlace;\n  }\n\n  private async updatePlaceV2(value?: Place|PlaceResult|null) {\n    const oldPlace = this.getPlace();\n    if (!value || !isPlaceResult(value)) {\n      this.placeV2 = value;\n    } else {\n      this.placeV2 = await makePlaceFromPlaceResult(value, this);\n    }\n    this.placeChangedCallback(this.placeV2, oldPlace);\n  }\n}\n"]}