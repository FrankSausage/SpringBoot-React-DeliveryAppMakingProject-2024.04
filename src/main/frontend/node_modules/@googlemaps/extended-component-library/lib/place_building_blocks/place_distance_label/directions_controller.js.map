{"version":3,"file":"directions_controller.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_distance_label/directions_controller.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,OAAO,EAAC,SAAS,EAAC,MAAM,gCAAgC,CAAC;AACzD,OAAO,EAAC,iBAAiB,EAAC,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAC,YAAY,EAAC,MAAM,8BAA8B,CAAC;AAE1D,MAAM,UAAU,GAAG,GAAG,CAAC;AAEvB,SAAS,0BAA0B;IACjC,OAAO,IAAI,YAAY,CAGnB,UAAU,EAAE,CAAC,KAAmC,EAAE,EAAE;QAClD,uEAAuE;QACvE,iEAAiE;QACjE,0FAA0F;QAC1F,OAAO,KAAK,CAAC,IAAI;YACb,kBAAkD;YAClD,KAAK,CAAC,IAAI,KAAK,eAA+C,CAAC;IACrE,CAAC,CAAC,CAAC;AACT,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,oBAAoB;IAI/B,YAA6B,IAAuC;QAAvC,SAAI,GAAJ,IAAI,CAAmC;QAClE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,UAAU,KAAI,CAAC;IAEf;;;;OAIG;IACH,KAAK,CAAC,KAAK,CAAC,OAAsC;QAEhD,IAAI,eAAe,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC9D,IAAI,eAAe,KAAK,IAAI,EAAE;YAC5B,eAAe;gBACX,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAChE,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;SAC1D;QACD,IAAI;YACF,OAAO,MAAM,eAAe,CAAC;SAC9B;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;YAC3C,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAEO,KAAK,CAAC,UAAU;QACtB,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE;YACjC,MAAM,EAAC,iBAAiB,EAAC,GACrB,MAAM,SAAS,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAC/B,CAAC;YACvB,oBAAoB,CAAC,OAAO,GAAG,IAAI,iBAAiB,EAAE,CAAC;SACxD;QACD,OAAO,oBAAoB,CAAC,OAAO,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAK;QACV,oBAAoB,CAAC,KAAK,GAAG,0BAA0B,EAAE,CAAC;QAC1D,oBAAoB,CAAC,OAAO,GAAG,SAAS,CAAC;IAC3C,CAAC;;AAjDc,0BAAK,GAAG,0BAA0B,EAAE,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, ReactiveController, ReactiveControllerHost} from 'lit';\n\nimport {APILoader} from '../../api_loader/api_loader.js';\nimport {RequestErrorEvent} from '../../base/events.js';\nimport {RequestCache} from '../../utils/request_cache.js';\n\nconst CACHE_SIZE = 100;\n\nfunction makeDirectionsRequestCache() {\n  return new RequestCache<\n      google.maps.DirectionsRequest, google.maps.DirectionsResult,\n      google.maps.MapsRequestError>(\n      CACHE_SIZE, (error: google.maps.MapsRequestError) => {\n        // Requests with a transient error DirectionsStatus of OVER_QUERY_LIMIT\n        // and UNKNOWN_ERROR should be retried. See full list of statuses\n        // https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\n        return error.code ===\n            'OVER_QUERY_LIMIT' as google.maps.DirectionsStatus ||\n            error.code === 'UNKNOWN_ERROR' as google.maps.DirectionsStatus;\n      });\n}\n\n/**\n * Controller that interfaces with the Maps JavaScript API Directions Service.\n */\nexport class DirectionsController implements ReactiveController {\n  private static service?: google.maps.DirectionsService;\n  private static cache = makeDirectionsRequestCache();\n\n  constructor(private readonly host: ReactiveControllerHost&LitElement) {\n    this.host.addController(this);\n  }\n\n  hostUpdate() {}\n\n  /**\n   * Makes a call to `DirectionsService.route` and returns the result as a\n   * promise. If request fails, the promise will resolve to null, and this\n   * method will dispatch a `RequestErrorEvent` from the host element.\n   */\n  async route(request: google.maps.DirectionsRequest):\n      Promise<google.maps.DirectionsResult|null> {\n    let responsePromise = DirectionsController.cache.get(request);\n    if (responsePromise === null) {\n      responsePromise =\n          this.getService().then((service) => service.route(request));\n      DirectionsController.cache.set(request, responsePromise);\n    }\n    try {\n      return await responsePromise;\n    } catch (error) {\n      const requestErrorEvent = new RequestErrorEvent(error);\n      this.host.dispatchEvent(requestErrorEvent);\n      return null;\n    }\n  }\n\n  private async getService(): Promise<google.maps.DirectionsService> {\n    if (!DirectionsController.service) {\n      const {DirectionsService} =\n          await APILoader.importLibrary('routes', this.host) as\n          typeof google.maps;\n      DirectionsController.service = new DirectionsService();\n    }\n    return DirectionsController.service;\n  }\n\n  /**\n   * Resets Directions Controller state by deleting any existing service object\n   * and clearing its cache.\n   * This method should be invoked for testing purposes only.\n   * @ignore\n   */\n  static reset() {\n    DirectionsController.cache = makeDirectionsRequestCache();\n    DirectionsController.service = undefined;\n  }\n}\n"]}