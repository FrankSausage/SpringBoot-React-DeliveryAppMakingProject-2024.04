{"version":3,"file":"place_opening_hours.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_opening_hours/place_opening_hours.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../place_field_boolean/place_field_boolean.js';\nimport '../place_field_text/place_field_text.js';\n\nimport {css, html, nothing, PropertyValues} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\nimport {map} from 'lit/directives/map.js';\n\nimport {LocalizationController} from '../../base/localization_controller.js';\nimport {WebFont, WebFontController} from '../../base/web_font_controller.js';\nimport type {Place} from '../../utils/googlemaps_types.js';\nimport {formatTimeWithWeekdayMaybe, getUpcomingCloseTime, getUpcomingOpenTime, isSoon, NextCloseTimeStatus, NextOpenTimeStatus} from '../../utils/opening_hours.js';\nimport {Poll} from '../../utils/poll.js';\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\n\n\nconst POLLING_INTERVAL_MS = 60 * 1000;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-place-opening-hours': PlaceOpeningHours;\n  }\n}\n\n/**\n * Component that renders a summary of the place’s current opening status and an\n * accordion that shows the weekly opening hours when expanded.\n *\n * This component will display content only if there is sufficient data to\n * calculate the place’s opening status (unless the place is not operational, in\n * which case it will render the place’s business status instead). A place’s\n * opening status is determined by its business status, opening hours periods,\n * and UTC offset minutes.\n *\n * @cssproperty [--gmpx-hours-color-open] - Text color when the place is\n * currently open.\n * @cssproperty [--gmpx-hours-color-closed] - Text color when the place\n * is currently closed.\n */\n@customElement('gmpx-place-opening-hours')\nexport class PlaceOpeningHours extends PlaceDataConsumer {\n  static override styles = css`\n    button {\n      align-items: center;\n      background: none;\n      border: none;\n      color: inherit;\n      cursor: pointer;\n      display: flex;\n      font: inherit;\n      padding: 0;\n    }\n\n    span {\n      display: inline-block;\n    }\n\n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n\n    .closed {\n      color: var(--gmpx-hours-color-closed, #d50000);\n    }\n\n    .open {\n      color: var(--gmpx-hours-color-open, #188038);\n    }\n\n    .icon {\n      direction: inherit;\n      font-size: inherit;\n      margin-inline-start: 1rem;\n    }\n  `;\n\n  /**\n   * Render only the summary line, without the accordion containing weekly\n   * opening hours.\n   */\n  @property({attribute: 'summary-only', reflect: true, type: Boolean})\n  summaryOnly = false;\n\n  @state() private expanded = false;\n\n  private readonly poll = new Poll();\n\n  protected readonly fontLoader =\n      new WebFontController(this, [WebFont.MATERIAL_SYMBOLS_OUTLINED]);\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.poll.stop();\n  }\n\n  protected override willUpdate(changedProperties: PropertyValues<this>) {\n    super.willUpdate(changedProperties);\n\n    // Set up polled updates.\n    this.poll.stop();\n    if (this.getPlace()) {\n      this.poll.start(() => void this.requestUpdate(), POLLING_INTERVAL_MS);\n    }\n  }\n\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\n\n  protected override render() {\n    const place = this.getPlace();\n    if (!place) return nothing;\n\n    // If opening hours data is missing, try to render business status instead.\n    if (!place.regularOpeningHours) {\n      if (place.businessStatus === 'OPERATIONAL') return nothing;\n      return html`\n        <div class=\"closed\">\n          <gmpx-place-field-text field=\"businessStatus\" .place=${place}>\n          </gmpx-place-field-text>\n        </div>\n      `;\n    }\n    const {weekdayDescriptions} = place.regularOpeningHours;\n\n    // if UTC offset data is missing, omit opening status from the summary.\n    let summary;\n    if (place.utcOffsetMinutes == null) {\n      summary = this.summaryOnly ?\n          html`` :\n          html`${this.getMsg('PLACE_OPENING_HOURS_DEFAULT_SUMMARY')}`;\n    } else {\n      summary = html`\n        <gmpx-place-field-boolean field=\"isOpen()\" .place=${place}>\n          <div slot=\"true\">${this.getOpenSummaryContent(place)}</div>\n          <div slot=\"false\">${this.getClosedSummaryContent(place)}</div>\n        </gmpx-place-field-boolean>\n      `;\n    }\n    if (this.summaryOnly) return summary;\n\n    return html`\n      <button\n        aria-controls=\"details\"\n        aria-expanded=${this.expanded}\n        @click=${() => this.expanded = !this.expanded}\n        type=\"button\"\n      >\n        ${summary}\n        <span aria-hidden=\"true\" class=\"icon material-symbols-outlined\">\n          ${this.expanded ? 'expand_less' : 'expand_more'}\n        </span>\n      </button>\n      <div\n        aria-label=${this.getMsg('PLACE_OPENING_HOURS_ARIA_LABEL')}\n        .hidden=${!this.expanded}\n        id=\"details\"\n        role=\"region\"\n      >\n        <ul>\n          ${map(weekdayDescriptions, (description) => html`\n            <li>${description}</li>\n          `)}\n        </ul>\n      </div>\n    `;\n  }\n\n  /** @ignore */\n  getRequiredFields(): Array<keyof Place> {\n    return ['businessStatus', 'regularOpeningHours', 'utcOffsetMinutes'];\n  }\n\n  protected override placeHasData(place: Place): boolean {\n    if (place.businessStatus === 'OPERATIONAL' && !place.regularOpeningHours) {\n      return false;\n    }\n    return !!(place.businessStatus || place.regularOpeningHours);\n  }\n\n  private getOpenSummaryContent(place: Place) {\n    const {status, closePoint, closeDate} = getUpcomingCloseTime(place);\n    const openNowMessage =\n        html`<span class=\"open\">${this.getMsg('PLACE_OPEN_NOW')}</span>`;\n    if (status === NextCloseTimeStatus.ALWAYS_OPEN) {\n      return html`<span class=\"open\">${\n          this.getMsg('PLACE_OPEN_ALWAYS')}</span>`;\n    } else if (\n        (status === NextCloseTimeStatus.WILL_CLOSE) && isSoon(closeDate!)) {\n      return html`\n        ${openNowMessage}\n        ·\n        <span>${\n          this.getMsg(\n              'PLACE_CLOSES',\n              formatTimeWithWeekdayMaybe(closePoint!, closeDate!))}</span>\n      `;\n    } else if (status === NextCloseTimeStatus.NOT_OPEN_NOW) {\n      // In this case, the summary content isn't displayed by the Place Boolean\n      // Field component anyway. Return the default summary.\n    }\n    return openNowMessage;\n  }\n\n  private getClosedSummaryContent(place: Place) {\n    const {status, openPoint, openDate} = getUpcomingOpenTime(place);\n\n    let nextOpenInfo = html``;\n    if (status === NextOpenTimeStatus.WILL_OPEN) {\n      nextOpenInfo = html` · <span>${\n          this.getMsg(\n              'PLACE_OPENS',\n              formatTimeWithWeekdayMaybe(openPoint!, openDate!))}</span>`;\n    } else if (status === NextOpenTimeStatus.ALREADY_OPEN) {\n      // In this case, the summary content isn't displayed by the Place Boolean\n      // Field component anyway. Return the default summary.\n    }\n\n    return html`\n      <span class=\"closed\">${this.getMsg('PLACE_CLOSED')}</span>\n      ${nextOpenInfo}\n    `;\n  }\n}\n"]}