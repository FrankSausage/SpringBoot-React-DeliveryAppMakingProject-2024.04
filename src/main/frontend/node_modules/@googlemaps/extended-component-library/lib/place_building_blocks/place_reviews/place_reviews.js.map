{"version":3,"file":"place_reviews.js","sourceRoot":"","sources":["../../../src/place_building_blocks/place_reviews/place_reviews.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {css, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {map} from 'lit/directives/map.js';\nimport {when} from 'lit/directives/when.js';\n\nimport {getTypeScaleSizeFromPx, GMPX_BORDER_SEPARATOR, GMPX_COLOR_ON_SURFACE, GMPX_COLOR_ON_SURFACE_VARIANT, GMPX_FONT_BODY, GMPX_FONT_CAPTION, GMPX_FONT_TITLE_MEDIUM, GMPX_RATING_COLOR, GMPX_RATING_COLOR_EMPTY} from '../../base/common_styles.js';\nimport {LocalizationController} from '../../base/localization_controller.js';\nimport {WebFont, WebFontController} from '../../base/web_font_controller.js';\nimport type {Place, Review} from '../../utils/googlemaps_types.js';\nimport {PlaceDataConsumer} from '../place_data_consumer.js';\n\nconst MAX_RATING = 5;\n\nenum IconType {\n  FULL = 'full',\n  EMPTY = 'empty',\n}\n\nfunction toStarIcons(rating: number): IconType[] {\n  return Array.from<IconType>({length: MAX_RATING})\n      .fill(IconType.FULL, 0, rating)\n      .fill(IconType.EMPTY, rating);\n}\n\n/**\n * Renders a list of user-generated place reviews.\n *\n * Reviews are displayed in an order corresponding to the default behavior of\n * the [Place\n * API](https://developers.google.com/maps/documentation/javascript/reference/place#Place).\n *\n * @cssproperty [--gmpx-rating-color] - Color of the star rating icons\n * when filled.\n * @cssproperty [--gmpx-rating-color-empty] - Color of the star rating\n * icons when empty.\n * @cssproperty [--gmpx-color-outline] - Divider color.\n */\n@customElement('gmpx-place-reviews')\nexport class PlaceReviews extends PlaceDataConsumer {\n  static override styles = css`\n    .container {\n      color: ${GMPX_COLOR_ON_SURFACE};\n      font: ${GMPX_FONT_BODY};\n    }\n    .review {\n      padding: ${getTypeScaleSizeFromPx(20)};\n      padding-bottom: ${getTypeScaleSizeFromPx(16)};\n    }\n    .review:not(:last-child) {\n      border-bottom: ${GMPX_BORDER_SEPARATOR};\n    }\n    .header, .subheader {\n      align-items: center;\n      display: flex;\n    }\n    .subheader {\n      margin-top: ${getTypeScaleSizeFromPx(16)};\n    }\n    .body {\n      margin-top: ${getTypeScaleSizeFromPx(8)};\n    }\n    .author-photo {\n      display: block;\n      height: ${getTypeScaleSizeFromPx(32)};\n    }\n    .author-name {\n      color: inherit;\n      font: ${GMPX_FONT_TITLE_MEDIUM};\n      margin-inline-start: ${getTypeScaleSizeFromPx(8)};\n      text-decoration: none;\n    }\n    .author-name:hover {\n      text-decoration: underline;\n    }\n    .star-icon.full {\n      color: ${GMPX_RATING_COLOR};\n    }\n    .star-icon.empty {\n      color: ${GMPX_RATING_COLOR_EMPTY};\n    }\n    .relative-time {\n      color: ${GMPX_COLOR_ON_SURFACE_VARIANT};\n      font: ${GMPX_FONT_CAPTION};\n      margin-inline-start: ${getTypeScaleSizeFromPx(12)};\n    }\n  `;\n\n  /**\n   * The maximum number of reviews to display. If undefined, displays all\n   * reviews returned by the Places API, which provides at most 5.\n   */\n  @property({type: Number, reflect: true, attribute: 'max-reviews'})\n  maxReviews?: number;\n\n  protected readonly fontLoader =\n      new WebFontController(this, [WebFont.GOOGLE_SANS_TEXT]);\n\n  protected readonly getMsg = LocalizationController.buildLocalizer(this);\n\n  protected override render() {\n    const reviews = this.getReviews();\n    return when(reviews && reviews.length, () => html`\n      <div class=\"container\">\n        ${map(reviews!, this.renderOneReview.bind(this))}\n      </div>\n    `);\n  }\n\n  /** @ignore */\n  getRequiredFields(): Array<keyof Place> {\n    return ['reviews'];\n  }\n\n  protected override placeHasData(place: Place): boolean {\n    return !!(place.reviews && place.reviews.length > 0);\n  }\n\n  private renderOneReview(review: Review) {\n    const attribution = review.authorAttribution;\n    const header = html`\n      <div class=\"header\">\n        ${\n        when(\n            attribution?.photoURI,\n            () => html`\n          <a target=\"_blank\" href=\"${attribution?.uri ?? ''}\">\n            <img class=\"author-photo\"\n                alt=${\n                this.getMsg(\n                    'PLACE_REVIEWS_AUTHOR_PHOTO_ALT',\n                    attribution?.displayName ?? '')}\n                src=${attribution!.photoURI!}>\n          </a>\n        `)}\n        <a class=\"author-name\"\n          target=\"_blank\"\n          href=\"${attribution?.uri ?? ''}\">\n          ${attribution?.displayName ?? ''}\n        </a>\n      </div>\n    `;\n\n    // clang-format off\n    const subheader = html`\n      <div class=\"subheader\">\n        ${when(review.rating, () => html`\n          <span role=\"img\" aria-label=${\n              this.getMsg('PLACE_RATING_ARIA_LABEL', review.rating!)}>\n            <span aria-hidden=\"true\">\n              ${map(toStarIcons(review.rating!), (iconType) => {\n                return html`<span class=\"star-icon ${iconType}\">&#x2605;</span>`;\n              })}\n            </span>\n          </span>\n        `)}\n        <span class=\"relative-time\">\n          ${review.relativePublishTimeDescription ?? ''}\n        </span>\n      </div>\n    `;\n    // clang-format on\n\n    return html`\n      <div class=\"review\">\n        ${header}\n        ${subheader}\n        ${when(review.text, () => html`\n          <div class=\"body\">\n            ${review.text}\n          </div>\n        `)}\n      </div>\n    `;\n  }\n\n  private getReviews(): Review[]|null {\n    const reviews = this.getPlace()?.reviews;\n    if (!reviews) return null;\n    if (this.maxReviews === undefined) return reviews;\n    if (this.maxReviews < 1) return null;\n    return reviews.slice(0, Math.floor(this.maxReviews));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-place-reviews': PlaceReviews;\n  }\n}\n"]}