{"version":3,"file":"overlay_layout.js","sourceRoot":"","sources":["../../src/overlay_layout/overlay_layout.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {css, CSSResultGroup, html} from 'lit';\nimport {customElement, query, queryAssignedElements, state} from 'lit/decorators.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\nimport {BaseComponent} from '../base/base_component.js';\nimport {SlotValidationController} from '../base/slot_validation_controller.js';\nimport {getDeepActiveElement, someDeepContains} from '../utils/deep_element_access.js';\n\n/**\n * The overlay layout component allows you to display information in a\n * responsive panel view that sits on top of main content, like a map or a list.\n * You might use this to show a modal dialog, more details about a place, or\n * settings.\n *\n * This component helps manage keyboard focus when opening and closing the\n * overlay.\n *\n * The size of the gmpx-overlay-layout can be set directly with the `width` and\n * `height` properties. If none are provided, it will fill the size of its\n * containing element.\n *\n * ![](./doc_src/overlay-layout.gif)\n *\n * **To use this component, you'll need to specify `slot=\"main\"` or\n * `slot=\"overlay\"` on its children.** Read more on using slots\n * [here](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots#adding_flexibility_with_slots).\n *\n * @slot main - Main content, displayed by default.\n * @slot overlay - Overlay content that replaces the main content when the panel\n * is opened.\n */\n@customElement('gmpx-overlay-layout')\nexport class OverlayLayout extends BaseComponent {\n  static override styles: CSSResultGroup = css`\n    :host(:not([hidden])) {\n      display: block;\n      height: 100%;\n    }\n    .outer-container {\n      display: block;\n      height: 100%;\n      position: relative;\n    }\n    .inner-container {\n      inset: 0;\n      overflow: auto;\n      position: absolute;\n    }\n    .inner-container:focus-visible {\n      outline: none;\n    }\n  `;\n\n  @queryAssignedElements({slot: 'main'})\n  private readonly mainAssignedEls!: HTMLElement[];\n\n  @queryAssignedElements({slot: 'overlay'})\n  private readonly overlayAssignedEls!: HTMLElement[];\n\n  @query('.main-container') private readonly mainContainer!: HTMLDivElement;\n\n  @query('.overlay-container')\n  private readonly overlayContainer!: HTMLDivElement;\n\n  @state() private opened = false;\n  private mainLastActiveEl: HTMLElement|null = null;\n\n  protected slotValidator =\n      new SlotValidationController(this, this.logger, ['main', 'overlay']);\n\n  /**\n   * Opens the overlay panel.\n   *\n   * If focus is currently in the main content, the focused element will be\n   * saved to regain focus when closing the overlay. Focus will then move to\n   * the element in the overlay slot with autofocus, if present. If no element\n   * has autofocus, the internal overlay container will be focused so that\n   * pressing Tab will focus the first interactive element in the overlay slot.\n   *\n   * Overlay content will be scrolled to the top, if the panel was previously\n   * opened and scrolled down.\n   */\n  async showOverlay() {\n    if (this.opened) return;\n    this.mainLastActiveEl = this.getMainActiveEl();\n    this.opened = true;\n    await this.updateComplete;\n    this.overlayContainer.scroll(0, 0);\n    if (this.mainLastActiveEl) {\n      const autofocusEl = this.getOverlayAutofocusEl();\n      if (autofocusEl) {\n        autofocusEl.focus();\n      } else {\n        this.overlayContainer.focus();\n      }\n    }\n  }\n\n  /**\n   * Closes the overlay panel.\n   *\n   * If focus is currently in the overlay content, focus will move to the last\n   * focused main element, if this was saved when opening the panel. If no\n   * focused element was saved, the internal main container will be focused\n   * so that pressing Tab will focus the first interactive element in the main\n   * slot.\n   */\n  async hideOverlay() {\n    if (!this.opened) return;\n    const overlayActiveEl = this.getOverlayActiveEl();\n    this.opened = false;\n    if (overlayActiveEl || (getDeepActiveElement() === this.overlayContainer)) {\n      await this.updateComplete;\n      if (this.mainLastActiveEl) {\n        this.mainLastActiveEl.focus();\n      } else {\n        this.mainContainer.focus();\n      }\n    }\n    this.mainLastActiveEl = null;\n  }\n\n  protected override render() {\n    // clang-format off\n    return html`\n      <div class=\"outer-container\">\n        <div\n          class=\"inner-container main-container\"\n          style=${styleMap({'display': this.opened ? 'none' : 'block'})}\n          tabindex=\"-1\"\n        >\n          <slot name=\"main\"></slot>\n        </div>\n        <div\n          class=\"inner-container overlay-container\"\n          style=${styleMap({'display': this.opened ? 'block' : 'none'})}\n          tabindex=\"-1\"\n          @keydown=${this.handleOverlayKeydown}\n        >\n          <slot name=\"overlay\"></slot>\n        </div>\n      </div>\n    `;\n    // clang-format on\n  }\n\n  private handleOverlayKeydown(e: KeyboardEvent) {\n    if (e.key === 'Escape') {\n      this.hideOverlay();\n    }\n  }\n\n  /**\n   * Returns the active element if it's a descendant, even across shadow\n   * boundaries, of one of the elements in els.\n   */\n  private getContainedActiveEl(els: Element[]): HTMLElement|null {\n    const deepActiveEl = getDeepActiveElement();\n    if (deepActiveEl instanceof HTMLElement) {\n      if (someDeepContains(els, deepActiveEl)) return deepActiveEl;\n    }\n    return null;\n  }\n\n  private getMainActiveEl(): HTMLElement|null {\n    return this.getContainedActiveEl(this.mainAssignedEls);\n  }\n\n  private getOverlayActiveEl(): HTMLElement|null {\n    return this.getContainedActiveEl(this.overlayAssignedEls);\n  }\n\n  private getOverlayAutofocusEl(): HTMLElement|null {\n    for (const el of this.overlayAssignedEls) {\n      const autofocusEl = el.querySelector('[autofocus]');\n      if (autofocusEl && autofocusEl instanceof HTMLElement) {\n        return autofocusEl;\n      }\n    }\n    return null;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'gmpx-overlay-layout': OverlayLayout;\n  }\n}\n"]}