"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useGeolocation = function useGeolocation() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      enableHighAccuracy = _ref.enableHighAccuracy,
      maximumAge = _ref.maximumAge,
      timeout = _ref.timeout;

  var callback = arguments.length > 1 ? arguments[1] : undefined;
  var isEnabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var _useState = (0, _react.useState)({
    accuracy: null,
    altitude: null,
    altitudeAccuracy: null,
    heading: null,
    latitude: null,
    longitude: null,
    speed: null,
    timestamp: null,
    error: null
  }),
      _useState2 = _slicedToArray(_useState, 2),
      coordinates = _useState2[0],
      setCoordinates = _useState2[1];

  var updateCoordinates = (0, _react.useCallback)(function (_ref2) {
    var coords = _ref2.coords,
        timestamp = _ref2.timestamp;
    var accuracy = coords.accuracy,
        altitude = coords.altitude,
        altitudeAccuracy = coords.altitudeAccuracy,
        heading = coords.heading,
        latitude = coords.latitude,
        longitude = coords.longitude,
        speed = coords.speed;
    setCoordinates({
      accuracy: accuracy,
      altitude: altitude,
      altitudeAccuracy: altitudeAccuracy,
      heading: heading,
      latitude: latitude,
      longitude: longitude,
      speed: speed,
      timestamp: timestamp,
      error: null
    });

    if (typeof callback === "function") {
      callback({
        accuracy: accuracy,
        altitude: altitude,
        altitudeAccuracy: altitudeAccuracy,
        heading: heading,
        latitude: latitude,
        longitude: longitude,
        speed: speed,
        timestamp: timestamp,
        error: null
      });
    }
  }, [callback]);
  var setError = (0, _react.useCallback)(function (error) {
    setCoordinates({
      accuracy: null,
      altitude: null,
      altitudeAccuracy: null,
      heading: null,
      latitude: null,
      longitude: null,
      speed: null,
      timestamp: null,
      error: error
    });
  }, []);
  (0, _react.useEffect)(function () {
    var watchId;

    if (isEnabled && navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(updateCoordinates, setError);
      watchId = navigator.geolocation.watchPosition(updateCoordinates, setError, {
        enableHighAccuracy: enableHighAccuracy,
        maximumAge: maximumAge,
        timeout: timeout
      });
    }

    return function () {
      if (watchId) {
        navigator.geolocation.clearWatch(watchId);
      }
    };
  }, [isEnabled, callback, enableHighAccuracy, maximumAge, setError, timeout, updateCoordinates]);
  return coordinates;
};

var _default = useGeolocation;
exports["default"] = _default;